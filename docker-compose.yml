version: '3.9'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    environment:
      TZ: Asia/Tokyo
      NEXT_PUBLIC_API_BASE_URL: http://backend:3000
      NODE_ENV: development
    volumes:
      - ./frontend:/app:cached
      - node-modules:/app/node_modules
    command: yarn dev -p 4000
    ports:
      - "4000:4000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    environment:
      RAILS_ENV: development
      TZ: Asia/Tokyo
      DATABASE_HOST: db
      DATABASE_USER: root
      DATABASE_PASSWORD: password
      DATABASE_NAME: app_development
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -b '0.0.0.0'"
    volumes:
      - ./backend:/app:cached
      - bundle-cache:/usr/local/bundle
    depends_on:
      - db
    ports:
      - "3000:3000"
    tty: true
    stdin_open: true
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app_development
      TZ: Asia/Tokyo
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    command: postgres -c 'max_connections=100' -c 'shared_buffers=128MB'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d app_development"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  node-modules:
  bundle-cache:
  postgres-data:

networks:
  app-network:
    driver: bridge